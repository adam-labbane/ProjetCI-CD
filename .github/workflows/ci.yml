name: Fullstack CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  VERCEL_ORG_ID:      ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID:  ${{ secrets.VERCEL_PROJECT_ID }}
  REACT_APP_SERVER_URL: http://backend:8000 

###############################################################################
# 1. TESTS BACK-END
###############################################################################
jobs:
  test_backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Backend Tests
        run: pytest --cov=. --cov-report=term

###############################################################################
# 2. BUILD STACK + TESTS End-to-End
###############################################################################
  build_and_test_fullstack:
    needs: test_backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install frontend deps
        working-directory: ./frontend
        run: npm ci

      # ────────────────────────────────────────────────────────────────────────
      # Démarrage de la stack (sans le service cypress)
      # ────────────────────────────────────────────────────────────────────────
      - name: Build & start Docker stack
        run: docker compose up -d --build

      # Optionnel : afficher la liste des conteneurs pour debug
      - name: Docker services
        run: docker compose ps

      # ────────────────────────────────────────────────────────────────────────
      # Cypress via l’action officielle
      # ────────────────────────────────────────────────────────────────────────
      - name: Cypress e2e tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./frontend
          wait-on: http://localhost:3000
          wait-on-timeout: 180
        env:
          CYPRESS_BASE_URL: http://localhost:3000

      # ────────────────────────────────────────────────────────────────────────
      # Dump des logs si échec
      # ────────────────────────────────────────────────────────────────────────
      - name: Dump Docker logs on failure
        if: failure()
        run: docker compose logs --no-color

      # ────────────────────────────────────────────────────────────────────────
      # Arrêt de la stack dans tous les cas
      # ────────────────────────────────────────────────────────────────────────
      - name: Stop Docker stack
        if: always()
        run: docker compose down

      # ────────────────────────────────────────────────────────────────────────
      # Upload couverture front
      # ────────────────────────────────────────────────────────────────────────
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

###############################################################################
# 3. BUILD & PUBLISH FRONTEND (GitHub Pages)
###############################################################################
  deploy_frontend:
    needs: build_and_test_fullstack
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install deps & build React app
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
        env:
          REACT_APP_SERVER_URL: ${{ env.REACT_APP_SERVER_URL }}

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./frontend/build

###############################################################################
# 4. DEPLOY GitHub Pages
###############################################################################
  deploy_pages:
    needs: deploy_frontend
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

###############################################################################
# 5. DEPLOY BACK-END (Vercel)
###############################################################################
  deploy_backend_vercel:
    needs: test_backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment info
        working-directory: ./Backend
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project
        working-directory: ./Backend
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to production
        working-directory: ./Backend
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
